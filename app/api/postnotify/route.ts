import { PrismaClient } from "@prisma/client";
import { NextResponse, NextRequest } from "next/server";
import admin from "firebase-admin";

const prisma = new PrismaClient();
const VERIFY_TOKEN = "mySecretAlertifyToken2025";

// Define the Emergency type based on your Prisma schema
interface Emergency {
  id?: string; // Optional since itâ€™s auto-generated by Prisma
  emergency: string;
  lat: string;
  long: string;
  purok: string;
  barangay: string;
  munName: string;
  name: string;
  mobile: string;
  position: string;
  munId: string;
  provId: string;
  photoURL: string;
  createdAt?: Date; // Optional, added by Prisma
}



if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE2_PROJECT_ID,
      privateKey: process.env.FIREBASE2_PRIVATE_KEY?.replace(/\\n/g, "\n"),
      clientEmail: process.env.FIREBASE2_CLIENT_EMAIL,
    }),
  });
}


async function sendFcmNotification(data: Emergency) {
  const { position, emergency, barangay } = data;
  try {
    await admin.messaging().send({
      
      notification: {
        title: "Incident Report!",
        body: `${position} reported a ${emergency} emergency in ${barangay}.`,
      },
      topic: "cotabatotoken2025",
    });
    console.log("FCM notification sent successfully");
  } catch (error) {
    console.error("Failed to send FCM notification:", error);
  }
}

export async function POST(request: Request) {
  const { searchParams } = new URL(request.url);
  const token = searchParams.get("token");

  if (token !== VERIFY_TOKEN) {
    return new NextResponse("Verification failed", { status: 403 });
  }

  try {
    const requestBody = await request.json();
    const { emergency, lat, long, purok, barangay,munName, name, mobile, position, photoURL, situation, munId, provId } =
      requestBody;

    if (!emergency || !lat || !long || !purok || !barangay || !name || !position || !mobile) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    const savedData = await prisma.postnotify.create({
      data: { emergency, lat, long, purok, barangay, munName, name, mobile, position, verified: true, photoURL, situation, munId, provId }
    });

    

    // Send FCM notification asynchronously
    sendFcmNotification(savedData).catch(console.error);

    return NextResponse.json(
      { message: "Postnotify data saved successfully" },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error during saving data:", error);
    return NextResponse.json({ message: "Failed to save data" }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}






export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const page = parseInt(searchParams.get('page') || '1', 30);
  const limit = 30;
  const skip = (page - 1) * limit;
  const provId = searchParams.get("provId") || undefined; // Get provId from query params, default to undefined if not provided
  // const todayDate = searchParams.get("createdAt") || undefined; // Get provId from query params, default to undefined if not provided


  try {
    const emergency_data = await prisma.postnotify.findMany({

      where: {
        ...(provId && { provId }), // Conditionally include provId in the filter
      },

      skip,
      take: limit,
      orderBy: {
        createdAt: 'desc',
      },
    });

    const totalRecords = await prisma.postnotify.count();

    const response = NextResponse.json({ emergency_data, totalRecords });


    return response;
  } catch (error) {
    console.error("Error fetching emergency data:", error);
    return NextResponse.error();
  }
}




