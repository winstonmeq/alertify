// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}




model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String    @default("USER")
  createdAt     DateTime
  updatedAt     DateTime
  premium       Boolean?
  sessions      Session[]
  accounts      Account[]
  provinces     Province[]
  municipalities Municipality[]


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Emergency {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  emergency String
  lat       String
  long      String
  mobile    String
  barangay  String
  nearby200 String?
  nearby500 String?
  munName   String
  name      String
  photoURL  String
 status    Boolean  @default(true)
  verified  Boolean  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
 mobUserId   String @db.ObjectId
 mobuser  Mobuser     @relation(fields: [mobUserId], references: [id], onDelete: Cascade)
  munId    String @db.ObjectId
 municipality Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
 provId    String @db.ObjectId
 province Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
 
  @@map("emergency")

}

model Postnotify {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId 
  emergency String
  lat       String
  long      String
  mobile    String
  barangay  String
  munName   String
  name      String
  situation String
  verified  Boolean  @default(false)
  photoURL  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  webUserId String @db.ObjectId
  webuser   Webuser     @relation(fields: [webUserId], references: [id], onDelete: Cascade)
  provId    String @db.ObjectId
  province  Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  munId    String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
  @@map("postnotify")

}


model Mobuser {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  firstname  String
  lastname   String
  barangay   String
  mobile     String @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  provId     String @db.ObjectId
  province   Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  munId      String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
  drrcode DrrCode[]
  fcmmobile Fcmmobile[]
  emergency Emergency[]
  @@map("mobuser")

}

model DrrCode {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  drrcode   String @unique
  selfie     String? 
  codeStatus Boolean  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  mobUserId    String? @db.ObjectId
  mobuser     Mobuser?     @relation(fields: [mobUserId], references: [id], onDelete: Cascade)
  provId     String @db.ObjectId
  province   Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  munId      String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)

  
  @@map("drrcode")

}


model Webuser {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  wname  String
  email   String @unique
  mobile     String 
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  provId     String @db.ObjectId
  province   Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  munId      String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
  fcmweb Fcmweb[]
  postnotify Postnotify[]

  @@map("webuser")
}


model Fcmweb {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  fcmToken  String   @unique 
  webUserId    String   @db.ObjectId
  webuser      Webuser     @relation(fields: [webUserId], references: [id], onDelete: Cascade)  
  munId    String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("fcmweb")

}

model Fcmmobile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  fcmToken  String   @unique
  isActive  Boolean  @default(true) 
  mobUserId    String   @db.ObjectId
  mobuser      Mobuser     @relation(fields: [mobUserId], references: [id], onDelete: Cascade)
  provId     String @db.ObjectId
  province   Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  munId      String @db.ObjectId
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("fcmmobile")

}

model Province {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  provinceName String
  provinceFCMToken String
  hotlineNumber    String
  pdrrmo     String
  provlogo   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postnotify Postnotify[]
  municipality Municipality[]
  emergency Emergency[]
  mobuser Mobuser[]
  webuser Webuser[]
  polygon Polygon[]  
  drrcode DrrCode[]
  fcmmobile Fcmmobile[]
  @@map("province")

}

model Municipality {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId 
  municipalityName String
  municipalityFCMToken String
  hotlineNumber    String
  lat       String?
  long      String?
  zoom      String?
  mdrrmo     String
  barangays  String
  munlogo    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provId    String    @db.ObjectId
  province  Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
 emergency Emergency[]
 postnotify Postnotify[]
  mobuser Mobuser[]
  webuser Webuser[]
  polygon Polygon[]
  drrcode DrrCode[]
  fcmweb Fcmweb[]
  fcmmobile Fcmmobile[]
  @@map("municipality")

}



model Polygon { 
  id String   @id @default(auto()) @map("_id") @db.ObjectId 
  name String 
  points Point[] @relation("PolygonPoints") 
  munId String @db.ObjectId 
  provId String @db.ObjectId 
  province  Province     @relation(fields: [provId], references: [id], onDelete: Cascade)
  municipality  Municipality     @relation(fields: [munId], references: [id], onDelete: Cascade)
    @@map("polygon")

  }

model Point { 
  id String   @id @default(auto()) @map("_id") @db.ObjectId 
  lat Float
  long Float
  polygonId String @db.ObjectId
  polygon Polygon @relation("PolygonPoints", fields: [polygonId], references: [id]) 
  @@map("points")
  }


model GeoPolygon {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  polType  String? 
  name     String
  geometry Json     // Store GeoJSON Polygon here
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("geopolygon")
}

